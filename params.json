{"name":"Service Cutter","tagline":"A Structured Way to Service Decomposition","body":"# Service Cutter\r\n\r\nYou will learn how to import data into the Service Cutter and analyze service cut. The last section outlines two possible usage scenarios.\r\n\r\n## Core Concepts\r\n\r\n- Nanoentity\r\n- User Representation\r\n- Coupling Criterion\r\n\r\n## Data Import\r\nThe importer tab allows you to import nanoentities and user representations.\r\n\r\n![Screenshot Menu Import](https://raw.githubusercontent.com/ServiceCutter/servicecutter.github.io/master/screenshot-menu-import.png)\r\n\r\nCurrently data updates are not possible. You therefore have to import it again after applying changes.\r\n\r\n### Domain Model\r\n\r\nTo begin with, a domain model in the form of an [ERM](https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model) needs to be imported.\r\n\r\n![Screenshot Upload Model](https://raw.githubusercontent.com/ServiceCutter/servicecutter.github.io/master/screenshot-import-model.png)\r\n\r\nA simple domain model can be found in the samples folder. Let's try with `ServiceCutter/Samples/ddd_1_model.json` for now.\r\n\r\n### User Representations\r\n\r\nTo suggest good service cuts, we need more data. The file `ServiceCutter/Samples/ddd_2_user_representations.json` enhances the domain model with Use Cases, characteristics of the nanoentities and responsible roles.\r\n\r\n![Screenshot upload user representations](https://raw.githubusercontent.com/ServiceCutter/servicecutter.github.io/master/screenshot-import-userrepresentations.png)\r\n\r\nNow we have all the data we need. Let's continue with the analysis.\r\n\r\n## Service Cut Analysis\r\n\r\n![Screenshot Menu Solver](https://raw.githubusercontent.com/ServiceCutter/servicecutter.github.io/master/screenshot-menu-solver.png)\r\n\r\nThe solver tab allows you to see candidate service cuts and modifiy the underlying algorithms, it's parameters and the prioritities.\r\n\r\nThe Service Cutter maps all imported data onto a graph. The nanoentities are the nodes and the coupling between nanoentities is stored on weighted, undirected edges.\r\n\r\n### Algorithms\r\n\r\nThe Service Cutter uses graph clustering algorithms to find densely connected clusters which are presented as candidate service cut. Currently two different algorithms are supported:\r\nThe \"Epidemic Label Propagation\" by [**Leung** et al](http://arxiv.org/pdf/0808.2633.pdf) is non-deterministic and finds an optimal number of clusters. Use the recalculate button to see different service cuts.\r\n\r\nSCREENSHOT\r\n\r\nThe **Girvan-Newman** algorithm by [M. Girvan and M. E. J. Newman](http://arxiv.org/abs/cond-mat/0112110) is deterministic and finds a given number of clusters. Please note that you cannot see different service cuts with Girvan-Newman as this algorithm is deterministic. You have to adjust the parameters to see different service cuts.\r\n\r\nSCREENSHOT\r\n\r\n### Parameters\r\n\r\npriorities...\r\nNumber of clusters\r\n\r\n## Scenarios\r\nDescribes possible usage scenarios of the Service Cutter.\r\n### Green field\r\nStart from scratch, identify service candidates.\r\n### Monolith to microservice\r\nExisting tool, big ball of mud. Where to start extracting?","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}